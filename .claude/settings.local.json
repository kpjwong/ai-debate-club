{
  "permissions": {
    "allow": [
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh repo create:*)",
      "Bash(where gh)",
      "Bash(Get-Command gh -ErrorAction SilentlyContinue)",
      "Bash(echo $SHELL)",
      "Bash(echo $PATH)",
      "Bash(\"/c/Program Files/GitHub CLI/gh\" --version)",
      "Bash(\"/c/Program Files/GitHub CLI/gh\" repo create ai-debate-club --public --description \"A multi-agent AI debate system using OpenAI agents with formal debate flow management\" --source=.)",
      "Bash(\"/c/Program Files/GitHub CLI/gh\" repo edit --visibility private)",
      "Bash(\"/c/Program Files/GitHub CLI/gh\" repo edit --visibility private --accept-visibility-change-consequences)",
      "Bash(git push:*)",
      "Bash(python:*)",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -m py_compile \"C:\\Users\\jerem\\OneDrive\\Desktop\\Projects\\Debator\\debate_club.py\")",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -m py_compile \"C:\\Users\\jerem\\OneDrive\\Desktop\\Projects\\Debator\\app.py\")",
      "WebSearch",
      "Bash(git merge:*)",
      "Bash(git tag:*)",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -c \"\nimport sys\nsys.path.append(''.'')\ntry:\n    import asyncio\n    from mcp_services.research_service import web_search, ping\n    print(''✅ Research service imports successfully'')\n    print(''Available tools: web_search, search_statistics, fact_check, ping'')\n    \n    # Test basic functionality\n    async def test():\n        result = await ping()\n        print(f''Ping test: {result}'')\n    \n    print(''Running async ping test...'')\n    # Can''t run async here, but imports work\n    print(''✅ All tools loaded successfully'')\nexcept ImportError as e:\n    print(f''❌ Import error: {e}'')\n    print(''Note: MCP dependencies may need to be installed'')\nexcept Exception as e:\n    print(f''⚠️ Warning: {e}'')\n    print(''Basic structure is correct, may need dependency installation'')\n\")",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -c \"\nimport sys\nimport asyncio\nsys.path.append(''.'')\ntry:\n    from mcp_services.research_service import web_search, ping\n    print(''✅ Research service imports successfully'')\n    \n    async def test():\n        print(''Testing ping...'')\n        ping_result = await ping()\n        print(f''Ping result: {ping_result}'')\n        \n        print(''\\nTesting web search...'')\n        search_result = await web_search(''artificial intelligence regulation'', 2)\n        print(''Search result preview:'')\n        print(search_result[:200] + ''...'' if len(search_result) > 200 else search_result)\n    \n    print(''Running async tests...'')\n    asyncio.run(test())\n    print(''✅ All tests passed!'')\n    \nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -c \"\nimport sys\nimport asyncio\nsys.path.append(''.'')\ntry:\n    from mcp_services.research_service import web_search, ping\n    print(''SUCCESS: Research service imports successfully'')\n    \n    async def test():\n        print(''Testing ping...'')\n        ping_result = await ping()\n        print(f''Ping result: {ping_result}'')\n        \n        print(''\\nTesting web search...'')\n        search_result = await web_search(''artificial intelligence regulation'', 2)\n        print(''Search result preview:'')\n        print(search_result[:300] + ''...'' if len(search_result) > 300 else search_result)\n    \n    print(''Running async tests...'')\n    asyncio.run(test())\n    print(''SUCCESS: All tests passed!'')\n    \nexcept Exception as e:\n    print(f''ERROR: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -c \"\nimport asyncio\nimport sys\nimport os\nsys.path.append(''.'')\n\n# Set a mock API key for testing\nos.environ[''OPENAI_API_KEY''] = ''sk-test-key''\n\nasync def test_mcp_integration():\n    try:\n        from debate_club import MCPResearchClient\n        \n        print(''Testing MCP integration...'')\n        client = MCPResearchClient()\n        \n        print(''Starting MCP service...'')\n        result = await client.start_service()\n        print(f''Service start result: {result}'')\n        \n        if result:\n            print(''Testing web search...'')\n            search_result = await client.web_search(''AI regulation test'', 2)\n            print(''Search result:'', search_result[:200] + ''...'' if len(search_result) > 200 else search_result)\n            \n            print(''Stopping service...'')\n            await client.stop_service()\n        \n        print(''MCP integration test completed!'')\n        \n    except Exception as e:\n        print(f''MCP integration error: {e}'')\n        import traceback\n        traceback.print_exc()\n\nasyncio.run(test_mcp_integration())\n\")",
      "Bash(\"/c/Users/jerem/AppData/Local/Programs/Python/Python311/python.exe\" -c \"\nimport asyncio\nimport sys\nimport os\nsys.path.append(''.'')\n\n# Set a mock API key for testing\nos.environ[''OPENAI_API_KEY''] = ''sk-test-key''\n\nasync def test_research_enabled_agents():\n    try:\n        from debate_club import create_pro_agent, create_con_agent, MCPResearchClient\n        \n        print(''Testing research-enabled agents...'')\n        \n        # Create MCP client\n        mcp_client = MCPResearchClient()\n        await mcp_client.start_service()\n        \n        # Create agents with research capabilities\n        print(''Creating Pro Agent with research tools...'')\n        pro_agent = create_pro_agent(''gpt-4o'', None, mcp_client)\n        print(f''Pro Agent created with {len(pro_agent.tools)} tools'')\n        \n        print(''Creating Con Agent with research tools...'')\n        con_agent = create_con_agent(''gpt-4o'', None, mcp_client)\n        print(f''Con Agent created with {len(con_agent.tools)} tools'')\n        \n        # Test tool availability\n        if pro_agent.tools:\n            print(''Available research tools:'')\n            for tool in pro_agent.tools:\n                print(f''  - {tool.name}: {tool.description}'')\n        \n        # Test MCP client methods directly\n        print(''Testing MCP client web search...'')\n        result = await mcp_client.web_search(''AI regulation test'')\n        print(''Search result preview:'', result[:150] + ''...'' if len(result) > 150 else result)\n        \n        # Cleanup\n        await mcp_client.stop_service()\n        print(''Research-enabled agents test completed!'')\n        \n    except Exception as e:\n        print(f''Test error: {e}'')\n        import traceback\n        traceback.print_exc()\n\nasyncio.run(test_research_enabled_agents())\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\c\\Program Files\\GitHub CLI\\bin",
      "C:\\c\\Users\\jerem\\AppData\\Local\\GitHubCLI\\bin",
      "C:\\mingw64",
      "C:\\"
    ]
  }
}